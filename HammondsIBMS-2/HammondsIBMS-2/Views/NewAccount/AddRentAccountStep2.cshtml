@using HammondsIBMS_2.ViewModels.Contract
@model HammondsIBMS_2.ViewModels.Accounts.AddRentAccountVM
<div class="well well-small well-noBackground">
    @Html.ContentTitle(Html.Action("StepperHeader").ToHtmlString())
    @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.CustomerAccountId)
        @Html.HiddenFor(model => model.CustomerId)
        @Html.HiddenFor(model => model.StockId)
        <fieldset>
            <legend>Rent Account</legend>
            <div class="control-group">
                <label class="control-label">Rented Units</label>
                <div class="controls">
                    <fieldset>
                        <table>
                            <tr>
                                <td class="contentspace">
                                    
                                    @Html.Partial("../Account/_AccountStockSelector")

                                      @{Html.Telerik().Grid<RentedUnitVM>()
                                        .Name("TempRentedUnitVMGrid")
                                        .DataKeys(keys => keys.Add(o => o.UnitId))
                                        .DataBinding(databind => databind.Ajax()
                                                                     .Select("_DisplayRentedUnits", "NewAccount"))
                                        .Columns(columns =>
                                                     {

                                                         columns.Bound(o => o.StockDescription);
                                                         columns.Bound(o => o.Identifier);
                                                         columns.Bound(o => o.RentedDate).Format("{0:dd/MM/yyyy}");
                                                         columns.Bound(o => o.Amount).Format("{0:£#0.00}");
                                                         columns.Bound(o => o.Deposit).Format("{0:£#0.00}");
                                                         columns.Bound(o => o.Notes);
                                                         columns.Bound(o => o.UnitId).Title("").Sortable(false).Width(115).ClientTemplate("<div class='commandColumn'>" + @Html.ActionDialogFormButton(new TelerikButtonParameters(ButtonIcon.Edit),
                                                                                                                                                                                                          new ActionParameters("_EditRentedUnit", new { id = "<#= UnitId #>" }),
                                                                                                                                                                                                          new ActionDialogFormParamters("Edit Rented Units", null, "_EditRentedUnit", null, "OnRentedUnitChanged")).ToHtmlString() +
                                                                                                                                                                              Html.ActionDialogFormButton(new TelerikButtonParameters(ButtonIcon.Delete),
                                                                                                                                                                                                            new ActionParameters("_DeleteTempAccountStock", new { id = "<#= UnitId #>" }),
                                                                                                                                                                                                            new ActionDialogFormParamters("Remove Rented Unit", null, "_DeleteTempAccountStock", null, "OnRentedUnitChanged")).ToHtmlString() +

                                                                                                                                                                                                          "</div>"
                                                             );



                                                     })
                                        .Editable(editing => editing.Mode(GridEditMode.PopUp))
                                        .Pageable()
                                        .Sortable()
                                        .Footer(false)
                                        .Render();
                                    }

                                </td>
                            </tr>
                        </table>


                    </fieldset>
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.TotalDeposit, new { @class = "control-label" })
                <div class="controls">
                    <span class="input-xlarge uneditable-input" id="TotalDeposit">@Model.TotalDeposit.ToString("C")</span>
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.TotalRental, new { @class = "control-label" })
                <div class="controls">
                    <span class="input-xlarge uneditable-input" id="TotalRental">@Model.TotalRental.ToString("C")</span> <span>@Model.RentalMonthsDue Months Due</span>
                </div>
            </div>
        </fieldset>
        <div>
            @Html.Action("StepperControl")
        </div>
    }
</div>
<script type="text/javascript">
    $(function () {
        $('#_AccountStockSelector').live('selectionChanged', function(event,val) {
            UnitSelected(val.value);
        });
    }
    );
    
    function UnitSelected(stockId) {
        $.post('@Url.Action("_AddRentedUnit")', { id: stockId }, function () {
            ClearErrorSummary();
            OnRentedUnitChanged();
        })
            .fail(DisplayJsonErrorInSummary);
    }
    

  @*  function UpdateSalesPrice(id) {
        OnGetModelInfo(id, function(data) {
            $('#ModelRentPrice').data('tTextBox').value(data.RentalPrice);
        });

    }

    function OnGetModelInfo(id, funcToCall) {
        $.get('@Url.Action("_GetModelInfoForStockId")' + '/' + id, funcToCall(data));
    }*@

    function OnRentedUnitChanged() {
        RebindTelerikGrid('TempRentedUnitVMGrid');
        $.get('@Url.Action("_GetRentalAndDepositTotals", new { dummy = Guid.NewGuid() })', function (data) {
           // $('#TotalDeposit').html(accounting.formatMoney(data.TotalDeposit));
            $('#TotalRental').html(accounting.formatMoney(data.TotalRental));
            $('#TotalDeposit').html(accounting.formatMoney(data.TotalDeposit));
        });
    }
</script>

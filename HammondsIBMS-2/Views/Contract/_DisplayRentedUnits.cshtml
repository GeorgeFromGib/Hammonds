
@using HammondsIBMS_2.ViewModels.Contract
<script type="text/javascript">


    function OnRentedUnitChanged(e) {
        RebindTelerikGrid('RentedUnitVMGrid');
        $('#_DisplayRentedUnits').trigger('changed');
    }

    function Grid_onDataBinding(e) {
        e.data = { showRemoved: $('#ShowRemoved:checked').val() };

    }

    function Grid_onRowDataBound(e) {
        var dataItem = e.dataItem;
        var removalDate = dataItem.RemovalDate;

        if (removalDate != null) $(e.row).find("div.commandColumn").hide();
    }


    $('#ShowRemoved').click(function () {
        RebindTelerikGrid('RentedUnitVMGrid');
    });


</script>
<div id="_DisplayRentedUnits">
    <fieldset>@Html.CheckBoxLabelled("ShowRemoved", false, "Show Removed")</fieldset>
    
    @{
        Html.Telerik().Grid<RentedUnitVM>()
            .Name("RentedUnitVMGrid")
            .DataKeys(keys => keys.Add(o => o.UnitId))
            .DataBinding(databind => databind.Ajax()
                                         .Select("_DisplayRentedUnits", "Contract", new { id = ViewBag.CustomerAccountId })
                                         .Update("_EditRentedUnit","Contract"))
            .ClientEvents(events => events.OnRowDataBound("Grid_onRowDataBound").OnDataBinding("Grid_onDataBinding"))                 
            .Columns(columns =>
                         {
                         
                             columns.Bound(o => o.StockDescription);
                             columns.Bound(o => o.Identifier);
                             columns.Bound(o => o.RentedDate).Format("{0:dd/MM/yyyy}");
                             columns.Bound(o => o.RemovalDate).Format("{0:dd/MM/yyyy}"); ;
                             columns.Bound(o => o.Amount).Format("{0:£#0.00}");
                             columns.Bound(o => o.Notes);
                             columns.Bound(o => o.UnitId).Title("").Sortable(false).Width(115).ClientTemplate("<div class='commandColumn'>"+@Html.ActionDialogFormButton(new TelerikButtonParameters(ButtonIcon.Edit), 
                                                                                                                                                                              new ActionParameters("_EditRentedUnit", new {id = "<#= UnitId #>"}),
                                                                                                                                                                              new ActionDialogFormParamters("Edit Rented Units", null, "_EditRentedUnit", null, "OnRentedUnitChanged")).ToHtmlString() +
                                                                                                                   Html.ActionDialogFormButton(new TelerikButtonParameters(ButtonIcon.Exchange), 
                                                                                                                                               new ActionParameters("_EditAccountStock", new {id = "<#= UnitId #>"}),
                                                                                                                                               new ActionDialogFormParamters("Change Rented Unit Stock", null, "_EditAccountStock", null, "OnRentedUnitChanged")).ToHtmlString() +
                                                                                                                   Html.ActionDialogFormButton(new TelerikButtonParameters(ButtonIcon.Delete), 
                                                                                                                                               new ActionParameters("_DeleteAccountStock", new { id = "<#= UnitId #>" }),
                                                                                                                                               new ActionDialogFormParamters("Remove Rented Unit Stock", null, "_DeleteAccountStock", null, "OnRentedUnitChanged")).ToHtmlString() + "</div>"                            
                                 );



                         })
            .Editable(editing => editing.Mode(GridEditMode.PopUp))
            .Pageable()
            .Sortable()
            .Footer(false)
            .Render();
    }
</div>
